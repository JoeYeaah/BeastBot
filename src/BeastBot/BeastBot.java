/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package BeastBot;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.KeyEvent;

/**
 * BeastBot: a fork from Josh Pow and Bryan Serra's final project
 *
 * @author joe
 */
public class BeastBot extends javax.swing.JFrame {

    /**
     * Creates new form BeastBot
     */
    public BeastBot() {
        initComponents();
        singleThreadPressers = null;
        configurationFrame = new ConfigurationFrame();
        Dimension screen = getToolkit().getScreenSize();
        setLocation(new Point(screen.width - getWidth(), 25));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    ProgramName = new javax.swing.JLabel();
    StartButton = new javax.swing.JToggleButton();
    ConfigButton = new javax.swing.JButton();
    QuitButton = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("BeastBotMain");
    setAlwaysOnTop(true);
    setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    setForeground(java.awt.Color.white);
    setUndecorated(true);
    setResizable(false);
    getContentPane().setLayout(new java.awt.GridLayout());

    ProgramName.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
    ProgramName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    ProgramName.setText("J.Pow");
    getContentPane().add(ProgramName);

    StartButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    StartButton.setText("GO");
    StartButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        StartButtonActionPerformed(evt);
      }
    });
    getContentPane().add(StartButton);

    ConfigButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    ConfigButton.setText("Configure");
    ConfigButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        ConfigButtonActionPerformed(evt);
      }
    });
    getContentPane().add(ConfigButton);

    QuitButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    QuitButton.setText("Quit");
    QuitButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        QuitButtonActionPerformed(evt);
      }
    });
    getContentPane().add(QuitButton);

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void StartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartButtonActionPerformed
        KeyData[] keyDatas = configurationFrame.getKeyDatas();
        if (keyDatas != null) {
            if (singleThreadPressers == null) {
                singleThreadPressers = new SingleThreadPresser[keyDatas.length];
                for (int i = 0; i < keyDatas.length; i++) {
                    keyDatas[i].threshold = new Color(240, 140, 140);
                    keyDatas[i].hitKey = HITKEYS[i];

                    singleThreadPressers[i] = new SingleThreadPresser(keyDatas[i]);

                    Thread thread = new Thread(singleThreadPressers[i]);
                    thread.start();
                }
            } else {
                for (SingleThreadPresser singleThreadPresser : singleThreadPressers) {
                    singleThreadPresser.stop();
                }
                singleThreadPressers = null;
            }
        }
    }//GEN-LAST:event_StartButtonActionPerformed

    private void QuitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_QuitButtonActionPerformed

    private void ConfigButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfigButtonActionPerformed
        configurationFrame.setLocationRelativeTo(null);
        configurationFrame.setVisible(true);
    }//GEN-LAST:event_ConfigButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BeastBot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BeastBot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BeastBot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BeastBot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            BeastBot beastBot = new BeastBot();
            Dimension screen = beastBot.getToolkit().getScreenSize();
            beastBot.setLocation(new Point(screen.width - beastBot.getWidth(), 25));
            beastBot.setVisible(true);
        });
    }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton ConfigButton;
  private javax.swing.JLabel ProgramName;
  private javax.swing.JButton QuitButton;
  private javax.swing.JToggleButton StartButton;
  // End of variables declaration//GEN-END:variables

    private static final int[] HITKEYS = new int[]{KeyEvent.VK_Z, KeyEvent.VK_X, KeyEvent.VK_N, KeyEvent.VK_M}; // keymap for keys in the game

    private ConfigurationFrame configurationFrame;
    private SingleThreadPresser[] singleThreadPressers;
}
